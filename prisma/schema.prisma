generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Company {
  id            String    @id @default(uuid())
  name          String
  corporateName String
  cnpj          String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  Receipt       Receipt[]
  Cost          Cost[]

  @@index([userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  archived    Boolean? @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  Cost        Cost[]

  @@index([userId])
}

model Receipt {
  id             String   @id @default(uuid())
  value          Decimal  @db.Decimal(10, 2)
  number         String
  description    String
  competenceDate DateTime
  paymentDate    DateTime
  companyId      String
  company        Company  @relation(fields: [companyId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([companyId])
}

model Cost {
  id             String   @id @default(uuid())
  value          Decimal  @db.Decimal(10, 2)
  name           String
  competenceDate DateTime
  paymentDate    DateTime
  companyId      String?
  company        Company? @relation(fields: [companyId], references: [id])
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([companyId])
  @@index([categoryId])
}

model Config {
  id            String  @id @default(uuid())
  notifyByEmail Boolean @default(false)
  notifyBySms   Boolean @default(false)
  meiLimit      Decimal @default(81000) @db.Decimal(10, 2)
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  categories    Category[]
  receipts      Receipt[]
  costs         Cost[]
  config        Config?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
